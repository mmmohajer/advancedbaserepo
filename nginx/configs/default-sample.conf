upstream client {
    server client:3000;
}

upstream api {
    server api:8000;
}

upstream flower {
    server celery-flower:5555;
}

upstream channels {
    server channels:8001;
}

upstream janus {
    server janus:8188;
}

server {
    listen 80;
    server_name APP_DOMAIN www.APP_DOMAIN;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot;
        try_files $uri =404;
    }

    location = /health {
        access_log off;
        return 200 'Healthy';
        add_header Content-Type text/plain;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name www.APP_DOMAIN;
    ssl_certificate /etc/letsencrypt/live/APP_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/APP_DOMAIN/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    return 301 https://APP_DOMAIN$request_uri;
}

server {
    listen 443;
    server_name APP_DOMAIN;
    ssl_certificate /etc/letsencrypt/live/APP_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/APP_DOMAIN/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 5;
    gzip_buffers 16 8k;

    location / {
        proxy_pass http://client;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_cache_bypass $http_upgrade;
        proxy_http_version 1.1;
    }

    location /static {
        alias /vol/static/;
    }

    location /api {
        uwsgi_pass api;
        include /etc/nginx/uwsgi_params;
    }

    location /flower {
        auth_basic "Restricted";
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://flower;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /wss {
        proxy_pass http://channels;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        client_max_body_size 50M;
        proxy_buffering off;
    }

    location = /robots.txt {
        alias /to_be_served/robots.txt;
        default_type text/plain;
    }

    location ~ ^/sitemap.*\.xml$ {
        root /to_be_served;
        default_type application/xml;
        try_files $uri =404;
    }

    location /websocket_tmp {
        alias /websocket_tmp;
        try_files $uri =404;
    }

    location /janus {
        proxy_pass http://janus;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout 3600;
        proxy_send_timeout 3600;
        proxy_buffering off;
    }

    location = /health {
        access_log off;
        return 200 'Healthy';
        add_header Content-Type text/plain;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}